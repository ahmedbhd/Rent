apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "androidx.navigation.safeargs"

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.google.firebase.crashlytics'


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    buildFeatures {
        dataBinding = true
    }
    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    kapt { generateStubs = true }

    defaultConfig {
        applicationId "com.rent"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file('../keystore/keystore.jks')
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.core:core-ktx:$versions.core_ktx"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintlayout"
    implementation "androidx.fragment:fragment-ktx:$versions.fragment_ktx"
    implementation group: 'com.google.android.material', name: 'material', version: "$versions.material"
    implementation "androidx.legacy:legacy-support-v4:$versions.legacy_support_version"
    implementation "androidx.work:work-runtime-ktx:$versions.work_ktx"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    // Dagger core
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle_livedata_ktx"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle_viewmodel_ktx"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle_extensions"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofit_moshi"

    // Okhttp3
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp3"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp3"

    //Moshi
    implementation "com.squareup.moshi:moshi:$versions.kotlin_moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$versions.kotlin_moshi"

    //jetpack
    implementation "android.arch.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "android.arch.navigation:navigation-ui-ktx:$versions.navigation"

    //secure-preferences
    implementation "com.scottyab:secure-preferences-lib:$versions.secure_preferences"

    // Glide
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    implementation("com.github.bumptech.glide:okhttp3-integration:$versions.glide") {
        exclude group: 'glide-parent'
    }

    // Leakcanary
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leak_canary"

    //crashlytics
    // Recommended: Add the Firebase SDK for Google Analytics.
    implementation "com.google.firebase:firebase-analytics-ktx:$versions.analytics_ktx"
    implementation "com.google.firebase:firebase-crashlytics:$versions.analytics"


    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //room
    implementation "androidx.room:room-runtime:$versions.room"
    implementation "androidx.room:room-ktx:$versions.room"

    //rent
    implementation "com.github.applikeysolutions:cosmocalendar:$versions.cosmocalendar"

    implementation "com.squareup.retrofit2:converter-gson:2.3.0"
    implementation "com.squareup.retrofit2:converter-scalars:2.3.0"
    implementation "com.squareup.retrofit2:converter-gson:2.3.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"

    implementation "com.daimajia.swipelayout:library:$versions.swipelayout"
    implementation "com.daimajia.androidanimations:library:$versions.androidanimations"
    implementation "jp.wasabeef:recyclerview-animators:$versions.animators"
    implementation "com.nineoldandroids:library:$versions.nineoldandroids"

    implementation "com.github.kizitonwose:CalendarView:$versions.calendar_view"
    implementation "com.jakewharton.threetenabp:threetenabp:$versions.threetenabp"

    implementation "com.github.yukuku:ambilwarna:$versions.ambilwarna"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefreshlayout"


    kapt "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle_livedata_ktx"
    kapt "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle_viewmodel_ktx"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
    kapt "com.android.databinding:compiler:$versions.databinding"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.kotlin_moshi"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"

    kapt "androidx.room:room-compiler:$versions.room"

    // Test
    testImplementation "junit:junit:$versions.junit"
    testImplementation "androidx.arch.core:core-testing:$versions.arch_testing"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutine_test"
    testImplementation "io.mockk:mockk:$versions.mockk"
    testImplementation "com.google.truth:truth:$versions.truth"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.mock_webserver"
    testImplementation "org.robolectric:robolectric:$versions.roboelectric"
    testImplementation "androidx.test:core:$versions.core"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockito_kotlin"

    androidTestImplementation "androidx.test.ext:junit:$versions.ext_junit"
    androidTestImplementation "androidx.test:runner:$versions.runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso_core"
    androidTestImplementation "androidx.annotation:annotation-experimental:$versions.test_annotation"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutine_test"
    androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
    androidTestImplementation "androidx.arch.core:core-testing:$versions.arch_testing"
    androidTestImplementation "com.google.truth:truth:$versions.truth"


}


configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion support_library_version
            }
        }
    }
}

afterEvaluate {
    bundleRelease.doLast {
        android.applicationVariants.all { variant ->
            if (variant.buildType.name == 'release') {
                println("....................  mapping rename start  ..............................")

                def flavor = variant.flavorName
                def flavorRelease = "${flavor}Release"

                def inPath = "${buildDir}/outputs/mapping/${flavor}/release/mapping.txt"
                def outPath = "${buildDir}/outputs/mapping/${flavor}/release/${flavor}-mapping.txt"

                def inFile = file(inPath)
                def exist = inFile.exists()

                if (!exist) {
                    inPath = "${buildDir}/outputs/mapping/${flavorRelease}/mapping.txt"
                    outPath = "${buildDir}/outputs/mapping/${flavorRelease}/${flavor}-mapping.txt"
                }

                inFile = file(inPath)
                exist = inFile.exists()

                if (exist) {
                    inFile.renameTo(outPath)
                    inFile.delete()
                }
            }
        }
        println "mapping rename build finished"
    }
}
